{"pages":[],"posts":[{"title":"静态博客搭建","text":"Hexo初始化 Hexo 是基于node进行安装的 必备条件 Node.js Git 全局安装Hexo1$ yarn add -g hexo-cli 初始化hexo目录12345hexo init &lt;文件夹名&gt;cd &lt;文件夹名&gt;yarn 本地启动服务1hexo s 默认端口:4000 hexo 基础命令1234567891011# 清除文件hexo clean # 根据模板生成静态文件hexo g# 启动本地服务hexo s# 一键部署hexo d hexo d 需要进行一些相关配置，见下文 更换主题个人比较喜欢icarus，这个主题，在当前目录下，输入命令 12# 将主题文件克隆到 themes 文件夹下$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 修改_config.yml文件 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus 之后运行命令 12# 如果报错，先运行hexo clean 然后hexo g，重新生成文件$ hexo s // start a live server 部署博客 github新建一个 repository。repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。 安装git部署工具 1yarn add hexo-deployer-git 修改_config.yml文件 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: &lt;repository url&gt; #git@github.com:&lt;你的 GitHub 用户名&gt;/&lt;你的 GitHub 用户名&gt;.github.io.git branch: [branch] #默认master，可不填 message: [message] #部署时commit信息，可不填 一键部署 1hexo d 过几分钟查看https://&lt;你的 GitHub 用户名&gt;.github.io，就能看到自己博客啦~","link":"/2020-07-11-Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"原型","text":"原型链实例对象p/实例对象的构造函数Person: p.__proto__ 指向 Person 的perototype(原型对象) Person.prototype.__proto__ 指向 Object.prototype Object.prototype.__proto__ 指向 null Object.__proto__ 指向 Function.prototype Function.__proto__ 指向 Function.prototype 特点就是，如果一个实例对象中的方法要调用时，那么先找实例对象，如果没有则沿着原形链继续找，直到找到或者没有找到，如果找到就调用，没有找到就说明没有 原型函数实现继承构造函数创建对象的方式 1234567function 构造函数 { // 属性写在构造函数里 this.属性名 = \"属性值\"}// 方法写在原型对象上构造函数.prototype.方法名 = function () {} 1234567891011121314151617181920212223function Person(name, age, sex) { this.name = name this.age = age this.sex = sex}Person.prototype.say = function () { console.log(1);}function Student(name, age, sex, sid) { Person.call(this, name, age, sex) this.sid = sid}Student.prototype.study = function () { console.log(2);}// 实现方法的继承 直接修改原型链的指向，在原本原型链断开增加一条Student.prototype.__proto__ = Person.prototype// 或者Student.prototype = new Person class ES6中的类是一个假类，实质上还是用构造函数实现 12345678910111213141516171819202122232425262728293031323334353637383940414243// 这个Person叫类名class Person { // 每个类都有构造函数 constructor (name, age, sex) { // 属性写在构造函数里 this.name = name this.age = age this.sex = sex } // 方法直接写在类里 say () { // 这就是方法 }}// 进行继承class Student extends Person{ constructor (name, age, sex, sid) { // this.name = name // 调用super继承父类属性 super(name, age, sex) this.sid = sid } study () { // 这个方法必须new 类名得到对象后调用 console.log(1); } static study2 () { console.log(2); } // 静态方法会被添加到我们对应的类里，可以直接类名.方法名调用}const p = new Person('张三', 18, '男')const s = new Student('李四', 20, '男', 1000)console.log(p,s);Student.study(); // Uncaught TypeError: Student.study is not a functionStudent.study2(); // 2s.study(); // 1s.study2(); // Uncaught TypeError: s.study2 is not a function","link":"/2019-09-27-%E5%8E%9F%E5%9E%8B/"},{"title":"Yarn","text":"全局安装yarn原因：vue-cli初始化项目无法使用cnpm，速度太慢，yarn也是一个包管理器 全局安装yarn12npm install -g yarn#cnpm i -g yarn 此时无法使用yarn全局安装，因为yarn还未添加到全局path中 yarn添加到全局环境变量 cmd中输入 1yarn global bin 找到相关路径C:\\Users\\10903\\AppData\\Local\\Yarn\\bin 右键我的电脑 属性 高级系统设置 环境变量 选中Path编辑 新建 将yarn的bin文件路径添加进去 之后就能使用 1yarn global add @vue/cli 即进行yarn进行本地和全局的模块安装了 yarn的常用命令 安装模块 1234# 全局yarn global add bootstrap@3.4.1# 本地yarn add bootstrap@3.4.1 移除模块 1234# 全局yarn global remove bootstrap@3.4.1# 本地yarn remove bootstrap@3.4.1 运行脚本 12#yarn 脚本名yarn serve 恢复安装，即重装package.json中模块 123yarn# 对应npm/cnpm中的npm install","link":"/2019-09-25-yarn/"},{"title":"状态码","text":"分类 类别 原因短语 具体含义 1XX Informational（信息性状态码） 接收的请求正在处理 表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程 2XX Success（成功状态码） 请求正常处理完毕 表示成果接收请求并已完成整个处理过程 3XX Redirection（重定向状态码） 需要进行附加操作以完成请求 为完成请求，客户需进一步细化需求：例如：请求的资源已经移动一个新地址 4XX Client Error（客户端错误状态码） 服务器无法处理请求 客户端的请求有错误，包含语法错误或者不能正确执行 5XX Server Error（服务器错误状态码） 服务器处理请求出错 服务器端出现错误 常用状态码常用： 200 正常 302/307 临时重定向，指出请求的文档已被临时移动到别处，此文档的新的 url 在 location 响应头中给出 304 未修改，表示客户机缓存的版本是最新的，客户机应该继续使用它（拿缓存） 403 禁止，服务器理解客户端请求，但拒绝处理它，通常用于服务器上文件或目录的权限设置所致 404 找不到，服务器上不存在客户机所请求的资源 500 服务器内部错误，服务器端的 cgi，asp，jsp 等程序发生错误 详解： 2XX——表明请求被正常处理了 200 （OK）：请求已正常处理， 返回的是正常请求结果 204 （No Content）：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。 206 （Partial Content）：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。 3XX——表明浏览器需要执行某些特殊的处理以正确处理请求 301 （Moved Permanently）：资源的 uri 已更新，你也更新下你的书签引用吧。永久性重定向，请求的资源已经被分配了新的 URI，以后应使用资源现在所指的 URI。 302 （Found）：资源的 URI 已临时定位到其他位置了，姑且算你已经知道了这个情况了。临时性重定向。和 301 相似，但 302 代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。 303 （See Other）：资源的 URI 已更新，你是否能临时按新的 URI 访问。该状态码表示由于请求对应的资源存在着另一个 URL，应使用 GET 方法定向获取请求的资源。303 状态码和 302 状态码有着相同的功能，但 303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。 当 301,302,303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会自动再次发送。 304 （Not Modified）：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用 GET 方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回 304.。 307 （Temporary Redirect）：临时重定向。与 302 有相同的含义。 4XX——表明客户端是发生错误的原因所在。 400 （Bad Request）：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。 401 （Unauthorized）：该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证，DIGEST 认证）的认证信息。 403 （Forbidden）：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权 IP 等） 404 （Not Found）：服务器上没有请求的资源。路径错误等。 5XX——服务器本身发生错误 500 （Internal Server Error）：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是 web 应用存在 bug 或某些临时故障。 502 （Bad Gateway）：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。 503 （Service Unavailable）：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。 504 （Gateway Time-out）：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。","link":"/2019-09-27-%E7%8A%B6%E6%80%81%E7%A0%81/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"github.io","slug":"github-io","link":"/tags/github-io/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"原型","slug":"原型","link":"/tags/%E5%8E%9F%E5%9E%8B/"},{"name":"原型链","slug":"原型链","link":"/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"},{"name":"类","slug":"类","link":"/tags/%E7%B1%BB/"},{"name":"Yarn","slug":"Yarn","link":"/tags/Yarn/"},{"name":"包管理","slug":"包管理","link":"/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"},{"name":"网络","slug":"网络","link":"/tags/%E7%BD%91%E7%BB%9C/"},{"name":"HTTP","slug":"HTTP","link":"/tags/HTTP/"},{"name":"状态码","slug":"状态码","link":"/tags/%E7%8A%B6%E6%80%81%E7%A0%81/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Yarn","slug":"Yarn","link":"/categories/Yarn/"},{"name":"网络","slug":"网络","link":"/categories/%E7%BD%91%E7%BB%9C/"},{"name":"icarus","slug":"hexo/icarus","link":"/categories/hexo/icarus/"},{"name":"状态码","slug":"网络/状态码","link":"/categories/%E7%BD%91%E7%BB%9C/%E7%8A%B6%E6%80%81%E7%A0%81/"}]}